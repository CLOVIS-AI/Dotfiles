#!/usr/bin/env bash

. cl-depend announce "git ci"
. cl-depend announce-menu "git ci"
. announce-menu --import

FILE=$(mktemp)

announce-menu --title "Choose your style:" \
	"classic:No particular style" \
	"braindot:BrainDot style" \
	"eslint:Style used by ESLint projects"
STYLE=$(announce-menu-get)

function classic() {
	announce-menu --question "What did you do?" --allow-other
	announce-menu-get >>"$FILE"
}

function braindot() {
	announce-menu --title "Choose the type:" \
		"build:build system" \
		"ci:CI/CD" \
		"docs:documentation changes" \
		"feat:new features:backward-compatible" \
		"fix:fix problems:backward-compatible" \
		"upgrade:dependency upgrades/modifications" \
		"perf:better performances:backward-compatible" \
		"refactor:internal changes to the implementation:backward-compatible" \
		"style:grammar, coding style, linting..." \
		"test:new tests, refactoring tests..." \
		"breaking:breaking changes:backward-incompatible" \
		"merge:merge commits"
	TYPE=$(announce-menu-get)

	# shellcheck disable=SC2046
	announce-menu --title "Last used scopes:" --allow-other \
		$(git log --oneline --abbrev-commit | cut -d ' ' -f 1 --complement | grep --color=auto -E '^(build|ci|docs|feat|fix|perf|refactor|style|test|breaking)\(.*\)' | sed -r -e 's/\).*$//' -e 's/^.*\(//' | awk '!x[$0]++' | head -10)
	SCOPE=$(announce-menu-get)

	while true; do
		echo "    Type your commit message in the past tense"
		echo " r. Remind me of what I did"
		announce -nn "What did you do?"
		read -r MESSAGE

		[[ $MESSAGE != "r" ]] && break
		git dc
	done

	echo -e "$TYPE($SCOPE): $MESSAGE" >>"$FILE"

	cat >>"$FILE" <<EOF

# Give more details about your changes here:

# Explain breaking changes, link to issues you fix.

EOF
}

function eslint() {
	announce-menu --title "Choose the type:" \
		"Build:build system, dependencies, CI/CD" \
		"Upgrade:dependency upgrades" \
		"Docs:documentation changes" \
		"New:new features:backward-compatible" \
		"Fix:fix problems:backward-compatible" \
		"Update:improvements:backward-compatible" \
		"Breaking:changes:backward-incompatible"
	TYPE=$(announce-menu-get)

	announce-menu --question "What did you do?" --allow-other
	MESSAGE=$(announce-menu-get)
	echo -n "$MESSAGE" >>"$FILE"

	announce-menu --question "Fixes issue:" --default "empty" --allow-other
	FIX=$(announce-menu-get)
	[[ $FIX != "empty" ]] && echo -n " (fixes $FIX)" >>"$FILE"

	announce-menu --question "References issue:" --default "empty" --allow-other
	REF=$(announce-menu-get)
	[[ $REF != "empty" ]] && echo -n " (refs $REF)" >>"$FILE"

	echo >>"$FILE"
}

$STYLE

case $1 in
--merge | -m)
	shift
	git merge -v --file="$FILE" --edit "$@"
	;;
--commit | -c | *)
	shift
	git commit --file="$FILE" --edit "$@"
	;;
esac
