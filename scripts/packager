#!/bin/bash

#
# 'Packager' is a wrapper around many tools that are able to install/upgrade packages.
#
# It is created in order to be as easy as possible to extend to support more tools.
#
# To add support to a new tool, follow this procedure:
# - Create a script called 'packager-[name of your tool here, can be anything]', and add it to your PATH.
# - Your script should accept all the commands explained below.
#
# COMMANDS of packager tools.
#
# enabled
#   Should exit with an error code of 0 if your tool can be used (is installed on this machine...), or any other code if your tool cannot be used.
#   If the tool cannot be used, should display an explanation in the standard output..
#
# name
#   Should print the display-name of your tool (eg. 'git'), without trailing end-of-line character (eg. by using 'echo -n your-name').
#
# install [package1] [package2] [...]
#   Should install the given packages.
#
# upgrade
#   Should upgrade all installed packages.
#
# upgrade [package1] [package2] [...]
#   Should upgrade only the selected packages.
#
# remove [package1] [package2] [...]
#   Should remove the selected packages, but (if applicable), keep their dependencies and configuration.
#
# purge [package1] [package2] [...]
#   Should completely remove the package, any uneeded dependencies, and configuration files.
#
# search [package1] [package2] [...]
#   Should search for a package in the repositories.
#
# You can implement any other command you'd like, if needed. Wrappers are allowed to add their own interactive processes (eg. to ask for confirmation...). For example, it is possible to have a wrapper that asks the user whether 'sudo' should be used or not.
#

# ============================================= H E L P =============================================== #

if [[ $1 = "help" ]]
then
    cat <<EOF
packager - Created by Ivan Canet

Description:
    This tool is a wrapper around multiple package managers (pacman, apt...).
    Each packager tool is named 'packager-<name>'.

    When called, this script will first find all possible tools that are
    available on this machine, and will prompt the user to choose which to use.

General syntax:
    packager help
    packager [-v] <COMMAND> [packages...]

Options:
    help            Displays this message.
    -v              Displays debug information.

Commands:
    i,  install     Installs the given packages.
    u,  upgrade     Upgrades all packages.
                    When packages are specified, only upgrades those (if
                    possible).
    s,  search      Search for informations about a package.
    r,  remove      Prompts whether the user wants to remove or purge packages,
                    then applies the selected option on the given packages.
    p,  purge       Same as 'remove'.
Any other command will be passed to the backend.
EOF
    exit 0
fi

# ======================================== V E R B O S I T Y ========================================== #

VERBOSE=0
if [[ $1 = "-v" ]]
then
    VERBOSE=1
    shift
fi

function debug {
    [[ $VERBOSE = 1 ]] && echo "debug: $*"
}

# ========================================== L O A D I N G ============================================ #

function test-dependency {
    hash $1 || (announce "Missing dependency: '$1'"; MISSING=1)
}

debug "Checking for installation of dependencies..."
hash announce || (echo "Missing dependency: 'announce' (from clovis-ai/dotfiles)"; MISSING=1)
test-dependency compgen
debug "All dependencies checked."
if [[ $MISSING = 1 ]]
then
    echo "Failed because of missing dependencies."
    exit 1
fi

# ============================================ E X E C ================================================ #

function find-tools {
    for tool in $(compgen -A command "packager-") $(compgen -A function "packager-")
    do
        debug "Tool $tool found."
        if $tool enabled >/dev/null
        then
            debug "Tool $tool is enabled."
            TOOLS+=($tool)
        else
            debug "Tool $tool is disabled (if this is abnormal, run '$tool enabled' to get more information.)."
        fi
    done
}

function select-tool {
    announce "Choose your tool:"
    INDEX=0
    for tool in "${TOOLS[@]}"
    do
        echo -en " $INDEX. "
        $tool name
        echo
        let INDEX++
    done
    
    announce -nn "Your choice:"
    read CHOICE
    
    TOOL=${TOOLS[$CHOICE]}
    debug "Selected tool: '$TOOL'."
}

declare -a TOOLS
find-tools
select-tool

function find-command {
    case $1 in
    install|i)
        COMMAND=install
        ;;
    upgrade|u)
        COMMAND=upgrade
        ;;
    search|s)
        COMMAND=search
        ;;
    remove|r|purge|p)
        announce "Are you sure you want to completely remove the packages?"
        echo " y. Yes, delete everything, including uneeded dependencies and configuration."
        echo " r. No, remove the packages but keep the dependencies and configuration."
        echo " n. No, don't do anything."
        announce -nn "Your choice: (y/r/N)"
        read -r CHOICE
        case $CHOICE in
        y|yes|p|purge)
            COMMAND=purge
            ;;
        r|remove)
            COMMAND=remove
            ;;
        *)
            announce "Stopping."
            exit 0
            ;;
        esac
        ;;
    *)
        announce "Unknown command '$1', passing it anyway."
        COMMAND="$1"
        ;;
    esac
}

find-command $1
shift

$TOOL $COMMAND $*
