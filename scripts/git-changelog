#!/bin/bash

# ============================= VERBOSITY ======================================

VERBOSE=0
[[ $1 = '-v' ]] && VERBOSE=1 && shift

function debug {
    [[ $VERBOSE = 1 ]] && echo -e "$@"
}
debug "$@"

# ============================ DISPLAYING ======================================

if [[ $1 = "--format" ]]
then
    FORMAT=$2
    shift
    shift
else
    FORMAT="announce"
fi

function display {
    # $1 type of diplay (title, text, item)
    # $2 message to display
    case $FORMAT in
    announce)
        case $1 in
        title)
            announce $2
            ;;
        text)
            echo $2
            ;;
        item)
            echo " - $2"
            ;;
        esac
        ;;
    markdown)
        case $1 in
        title)
            echo "# $2"
            ;;
        text)
            echo $2
            ;;
        item)
            echo "- $2"
            ;;
        esac
        ;;
    telegram-markdown)
        case $1 in
        title)
            echo "*$2*"
            ;;
        text)
            echo $2
            ;;
        item)
            echo "- $2"
            ;;
        esac
        ;;
    telegram-html)
        ESCAPED=$(<<<"$2" sed 's|&|\&amp|g;s|<|\&lt |g;s|>| \&gt|g;s|"|\&quot|g;s|'"'"'|\&#39|g')
        case $1 in
        title)
            echo "<strong>$ESCAPED</strong>"
            ;;
        text)
            echo "$ESCAPED"
            ;;
        item)
            echo " • $ESCAPED"
            ;;
        esac
        ;;
    *)
        echo "Unrecognized format $FORMAT."
        exit 1
    esac
}
[[ $1 != "--no-title" ]] && display title "Changelog${CI_PROJECT_TITLE+" of "}${CI_PROJECT_TITLE}" || shift

unset COMMITS
if [[ $1 == "--incoming" ]]
then
	shift
	git show -s --format="%s%n%nWritten by %an [%ae]%nCommitted by %cn [%ce]%n%n%b" #| sed 's|See merge request \(.*\)!\(.*\)$|<a href="https://gitlab.com/\1/-/merge_requests/\2">More information</a>|'
	COMMITS=$(git blog --exclude-first | grep "current" | sed 's/current://')
	echo
	display "title" "Included modifications"
fi

# ============================ LOGIC ===========================================

function classify {
    # $1 sha-1 of commit
    # $2 message of commit (without formatted conventions)
    # $3 type of change
    # $4 scope of change (optional)
    MSG="$3: $2 ($1"
    [[ $4 != "" ]] && MSG+=", in ‘$4’"
    MSG+=")"
    
    echo "$MSG"
}

function angular-clean {
    echo "$@" | sed -r 's/^(chore|build|docs|feat|fix|perf|refactor|style|test|breaking|ci)(.*): //'
}

function angular-scope {
    echo "$@" | sed -r -e 's/^(chore|build|docs|feat|fix|perf|refactor|style|test|breaking|ci)\(//' -e 's/\).*$//'
}

function eslint-clean {
    echo "$@" | sed -r 's/^(Fix|Update|Breaking|Docs|Build|New|Upgrade): //'
}

TYPEBUILD="Build"
TYPECI="CI/CD"
TYPEDOC="Documentation"
TYPEFEAT="New features"
TYPEFIX="Fixes"
TYPEPERF="Performance improvements"
TYPEREFACTOR="Refactoring"
TYPESTYLE="Style modifications"
TYPETEST="Tests"
TYPEBREAKING="Breaking changes"

function find-commit {
    # Angular

    echo $1 | grep -E '^(chore|build)\(.*\): .*' >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPEBUILD" "$(angular-scope "$1")" && return

    echo $1 | grep -E '^ci\(.*\): .*'            >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPECI" "$(angular-scope "$1")" && return

    echo $1 | grep -E '^docs\(.*\): .*'          >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPEDOC" "$(angular-scope "$1")" && return

    echo $1 | grep -E '^feat\(.*\): .*'          >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPEFEAT" "$(angular-scope "$1")" && return

    echo $1 | grep -E '^fix\(.*\): .*'           >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPEFIX" "$(angular-scope "$1")" && return

    echo $1 | grep -E '^perf\(.*\): .*'          >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPEPERF" "$(angular-scope "$1")" && return

    echo $1 | grep -E '^refactor\(.*\): .*'      >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPEREFACTOR" "$(angular-scope "$1")" && return

    echo $1 | grep -E '^style\(.*\): .*'         >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPESTYLE" "$(angular-scope "$1")" && return

    echo $1 | grep -E '^test\(.*\): .*'          >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPETEST" "$(angular-scope "$1")" && return

    echo $1 | grep -E '^breaking\(.*\): .*'      >/dev/null && classify $2 "$(angular-clean "$1")" "$TYPEBREAKING" "$(angular-scope "$1")" && return

    # ESLint

    echo $1 | grep -E '^Fix: .*'                 >/dev/null && classify $2 "$(eslint-clean "$1")" "$TYPEFIX" "" && return

    echo $1 | grep -E '^Update: .*'              >/dev/null && classify $2 "$(eslint-clean "$1")" "$TYPEFEAT" "" && return

    echo $1 | grep -E '^Breaking: .*'            >/dev/null && classify $2 "$(eslint-clean "$1")" "$TYPEBREAKING" "" && return

    echo $1 | grep -E '^Docs: .*'                >/dev/null && classify $2 "$(eslint-clean "$1")" "$TYPEDOC" "" && return

    echo $1 | grep -E '^Build: .*'               >/dev/null && classify $2 "$(eslint-clean "$1")" "$TYPEBUILD" "" && return

    echo $1 | grep -E '^New: .*'                 >/dev/null && classify $2 "$(eslint-clean "$1")" "$TYPEFEAT" "" && return

    echo $1 | grep -E '^Upgrade: .*'             >/dev/null && classify $2 "$(eslint-clean "$1")" "$TYPEBUILD" "" && return

    # Couln't recognize pattern

    classify $2 "$1" "Unsorted" ""
}

if [[ $COMMITS == "" ]]; then
	[[ $# != 0 ]] && display text "Git options: $*"
	# shellcheck disable=SC2086
	# shellcheck disable=SC2048
	COMMITS=$(git log --pretty=format:'%h' $*)
fi

debug "Will work with commits $COMMITS"

function create {
    for COMMIT in $COMMITS
    do
        debug "\nReading commit $COMMIT"
        MSG=$(git show --oneline $COMMIT | head -1 | cut -d ' ' -f 1 --complement)

        debug "Header line: $MSG"
        find-commit "$MSG" $COMMIT
    done | sort
}

LAST=""
while IFS= read -r line
do
    HEADER=$(echo $line | sed 's/: .*$//')
    if [[ "$HEADER" != "$LAST" ]]
    then
        display text ""
        display text "$HEADER:"
        LAST="$HEADER"
    fi
    display item "$(echo $line | sed 's/^.*: //')"
done <<<$(create)

[[ ${CI_PROJECT_URL:-UNDEF} != UNDEF ]] && display text "" && display text "Project URL: $CI_PROJECT_URL"
