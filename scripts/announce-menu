#!/bin/bash

#
# announce-menu
# Written by Ivan Canet
#
# Usage:
#	announce-menu [-d DELIMITER] [--title TITLE] [--question QUESTION] [--default DEFAULT] <replies...>
#
# Options:
#	-d DELIMITER			Set what the character to use for columns is. Default: ':'
#	--title	TITLE			Add a title line which says TITLE.
#	--question QUESTION		Override the "Your choice:" question with QUESTION.
#	--default DEFAULT		Set DEFAULT to be the default value.
#	--allow-other			Allow the user to input something else than the given responses.
#
# Format:
#	NAME:DESCRIPTION		NAME is the field the user can enter, DESCRIPTION is
#							an optional field to explain what the choice means.
#
# Other usages:
#	announce-menu --file-path			Print the path where the responses will be stored, and exit.
#	announce-menu --chosen CHOICE		Did the user choose CHOICE in the last menu?
#	. announce-menu --import			Add function 'announce-menu-get' which can be used to get the user's response.
#

CLOVIS_ANNOUNCE_MENU_CALL="<|> $*"

# **************************** OPTION HANDLING *********************************

ANNOUNCE_MENU_PATH="/tmp/clovis-announce-$USER"
[[ $1 == "--file-path" ]] && exec echo "$ANNOUNCE_MENU_PATH"

function announce-menu-get() {
	cat "$ANNOUNCE_MENU_PATH"
}
[[ $1 == "--import" ]] && return

[[ $1 == "--chosen" ]] && exec test "$(cat "$ANNOUNCE_MENU_PATH")" == "$2"

if [[ $1 == "-d" ]]; then
	delimiter="$2"
	shift
	shift
else
	delimiter=":"
fi

if [[ $1 == "--title" ]]; then
	announce "$2"
	shift
	shift
fi

QUESTION="Your choice:"
if [[ $1 == "--question" ]]; then
	QUESTION="$2"
	shift
	shift
fi

if [[ $1 == "--default" ]]; then
	DEFAULT="$2"
	shift
	shift
fi

unset ALLOW_OTHER
if [[ $1 == "--allow-other" ]]; then
	ALLOW_OTHER=yes
	shift
fi

# **************************** FINDING MEMORIES ********************************

ANNOUNCE_CACHE_PATH_DIR="$HOME/.cache/clovis"
ANNOUNCE_CACHE_PATH="$ANNOUNCE_CACHE_PATH_DIR/announce-menu-cache.txt"
ANNOUNCE_FINDINGS_PATH="/tmp/clovis-announce-$USER-findings"

mkdir -p "$ANNOUNCE_CACHE_PATH_DIR" || exit 1
touch "$ANNOUNCE_CACHE_PATH" || exit 1

if grep <"$ANNOUNCE_CACHE_PATH" "$CLOVIS_ANNOUNCE_MENU_CALL\$" >"$ANNOUNCE_FINDINGS_PATH" 2>/dev/null; then
	FOUND=$(sed <"$ANNOUNCE_FINDINGS_PATH" 's/<|>.*//')
fi

[[ $DEFAULT == "" && $FOUND != "" ]] && DEFAULT="${FOUND}"

# ****************************** DISPLAYING ************************************

declare -A CHOICES
ANSWERS=""

function clean-word() {
	# shellcheck disable=SC2001
	WORD=$(sed <<<"$1" "s|$delimiter.*||")
}

i=0
function display-int() {
	clean-word "$1"

	if [[ $FOUND == "$WORD" ]]; then
		ANSWERS+="\e[1m"
	else
		ANSWERS+="\e[0m"
	fi

	ANSWERS+="$i.$delimiter$1\e[0m\n"
	CHOICES[$i]="$WORD"
	CHOICES[$WORD]="$WORD"
	i=$((i + 1))
}

for input in "$@"; do
	display-int "$input"
done
echo -e "$ANSWERS" | column -t -s "$delimiter" | less -rFX
[[ $ALLOW_OTHER == "yes" ]] && echo "You can type your own comment."

# ******************************* QUESTION *************************************

CHOICE=""

while [[ $CHOICE == "" ]]; do
	announce -nn "$QUESTION${DEFAULT+ ($DEFAULT)}"
	read -r REPLY
	REPLY=${REPLY:-$DEFAULT}

	if [[ $REPLY == "" || ${CHOICES[REPLY]+_} ]]; then
		echo "Wrong input, please try again."
	else
		CHOICE=${CHOICES[$REPLY]}
	fi

	[[ $CHOICE == "" && $ALLOW_OTHER == "yes" ]] && CHOICE=$REPLY
done

echo "$CHOICE" >"$ANNOUNCE_MENU_PATH"

if [[ $FOUND == "" ]]; then
	echo "$CHOICE$CLOVIS_ANNOUNCE_MENU_CALL" >>"$ANNOUNCE_CACHE_PATH"
elif [[ $FOUND != "$CHOICE" ]]; then
	sed -i "s\\.*$CLOVIS_ANNOUNCE_MENU_CALL\\$CHOICE$CLOVIS_ANNOUNCE_MENU_CALL\\" "$ANNOUNCE_CACHE_PATH"
fi
