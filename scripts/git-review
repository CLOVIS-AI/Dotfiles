#!/bin/bash

# git review
# Written by Ivan “CLOVIS” Canet
#
# Description:
#	Allows the user to interactively merge two branches, using the different
#	systems handled by Git.
#	When the script starts, it will prompt for the two branches that are to be
#	merged.

MERGE_COMMAND="git merge"
hash compgen 2>/dev/null && compgen -A command "git-ci" >/dev/null && MERGE_COMMAND="git ci --merge"

ANNOUNCE_CHOICE=$(announce-menu --file-path)

LOCAL_BRANCHES=$(git for-each-ref refs/heads --format='%(refname)' | sed 's|refs/heads/||')
REMOTE_BRANCHES=$(git for-each-ref refs/remotes --format='%(refname)' | sed 's|refs/remotes/||;s|.*/HEAD||')
CURRENT_BRANCH=$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \1/' -e 's/^[[:space:]]*//' -e 's/(HEAD detached at //' -e 's/)//')
TRACKED_BRANCH=$(git data --tracked)
[[ $TRACKED_BRANCH == "" ]] && unset TRACKED_BRANCH
unset CREATE_BRANCH

# ********************************** Explain ***********************************

echo
announce "Welcome to Git Review!"
echo "This tool will allow you to merge or rebase any two branches."
echo "The 'source' branch is the one you want to take commits from, the 'target' branch is the one you want to put commits into."

# ****************************** Select the branches ***************************

function select-branch() {
	# shellcheck disable=SC2086
	announce-menu --title "$1" --default "$2" $LOCAL_BRANCHES ${TRACKED_BRANCH+"$TRACKED_BRANCH:Upstream branch"} "remote:Select a remote branch"
	if announce-menu --chosen "remote"; then
		# shellcheck disable=SC2086
		announce-menu --title "$1" $REMOTE_BRANCHES
	fi

	CHOICE_DISPLAY=$(cat "$ANNOUNCE_CHOICE")
	# shellcheck disable=SC2001
	CHOICE_REMOTE="$(sed <<<"$CHOICE_DISPLAY" 's|/.*||')"
	# shellcheck disable=SC2001
	CHOICE="$(sed <<<"$CHOICE_DISPLAY" "s|$CHOICE_REMOTE/||")"

	[[ $CHOICE == "$CHOICE_REMOTE" ]] && CHOICE_REMOTE=""
}

# ********************************* Diff ***************************************

function do-diff-as-one() {
	git diff "$TARGET_DISPLAY".."$SOURCE_DISPLAY"

	announce-menu --title "Accept?" "yes" "no"
	if announce-menu --chosen "yes"; then
		echo "Accepted."
	else
		echo "Aborting..."
		exit 0
	fi
}

function do-diff-one-by-one() {
	for COMMIT in $COMMITS; do
		git show --show-signature "$COMMIT"

		announce-menu --title "Accept $COMMIT?" "yes" "no"
		if announce-menu --chosen "no"; then
			echo "Aborting..."
			exit 0
		fi
	done
	announce "You accepted all commits."
}

function do-diff() {
	RANGE="$TARGET_DISPLAY..$SOURCE_DISPLAY"

	COMMITS=$(git log --reverse --pretty=format:'%h' "$RANGE")
	COMMITNUMBER="$(wc <<<"$COMMITS" -w)"

	if [[ $COMMITNUMBER -eq 0 ]]; then
		announce "The two branches are identical, there is nothing to do."
		exit 0
	fi

	if [[ $COMMITNUMBER -eq 1 ]]; then
		do-diff-as-one
		return
	fi

	if [[ $COMMITNUMBER -le 20 ]]; then
		echo
		git changelog "$RANGE"
	fi

	announce-menu --title "There are $COMMITNUMBER commits." \
		"as one:Review everything at once" \
		"one-by-one:Review each commit separately"
	case $(cat "$ANNOUNCE_CHOICE") in
	"as one")
		do-diff-as-one
		;;
	"one-by-one")
		do-diff-one-by-one
		;;
	esac
}

function announce-do() {
	announce run "$*"
	return $!
}

# ******************************* Local work ***********************************

function do-local-merge() {
	ALLOW_FF="--no-ff"
	if [[ $1 == "fastforward" ]]; then
		ALLOW_FF="--ff-only"
		MERGE_COMMAND="git merge"
	fi

	if [[ ! $CURRENT_BRANCH == "$TARGET_DISPLAY" ]]; then announce-do git checkout "$TARGET_DISPLAY" || exit 1; fi
	announce-do "$MERGE_COMMAND" --stat $ALLOW_FF "$SOURCE_DISPLAY"
	[[ ! $CURRENT_BRANCH == "$TARGET_DISPLAY" ]] && announce-do git checkout "$CURRENT_BRANCH"
}

function do-local-rebase() {
	[[ ! $CURRENT_BRANCH == "$SOURCE" ]] && announce-do git checkout "$SOURCE" || exit 1

	announce-do git rebase -i "$TARGET" || (announce "Could not rebase automatically, after finishing the rebase manually you will need to fast-forward $SOURCE onto $TARGET (you can run 'git review' again to do it)" && exit 1)

	git checkout "$TARGET" || exit 1

	announce-do git merge --stat --ff-only "$TARGET"

	[[ ! $CURRENT_BRANCH == "$TARGET" ]] && announce-do git checkout "$CURRENT_BRANCH"
}

function do-rebase-from-remote() {
	if git show-ref --verify --quiet refs/heads/"$SOURCE"; then
		if [[ $(git rev-parse "$SOURCE") != $(git rev-parse "$SOURCE_DISPLAY") ]]; then
			announce-menu --title "A local branch called $SOURCE exists and is different from $SOURCE_DISPLAY." \
				"overwrite:Reset $SOURCE so it's exactly the same as $SOURCE_DISPLAY" \
				"give up:Give up the review, do not touch anything."
			announce-menu --chosen "give up" && exit 0
		fi
	fi

	announce-do git checkout -B "$SOURCE" "$SOURCE_DISPLAY" || exit 1
	do-local-rebase
}

function do-local-squash() {
	[[ ! $CURRENT_BRANCH == "$TARGET" ]] && announce-do git checkout "$TARGET_DISPLAY" || exit 1
	announce-do "$MERGE_COMMAND" --stat --squash "$TARGET_DISPLAY"
	[[ ! $CURRENT_BRANCH == "$TARGET" ]] && announce-do git checkout "$CURRENT_BRANCH"
}

function do-local-work() {
	if [[ $1 == "--from-remote" ]]; then
		FROM_REMOTE="true"
	fi

	if git merge-base --is-ancestor "$TARGET_DISPLAY" "$SOURCE"; then
		fastforward="fastforward:The branches will be kept as they are"
	fi

	announce-menu --title "Which strategy do you want to use?" \
		"$fastforward" \
		"merge:A merge commit will be created" \
		"rebase:Copies the commits onto the selected branch" \
		"squash:Combines all commits into a single one (looses history information)"
	case $(cat "$ANNOUNCE_CHOICE") in
	"fastforward")
		do-local-merge fastforward
		;;
	"merge")
		do-local-merge
		;;
	"rebase")
		if [[ $FROM_REMOTE == "true" ]]; then
			do-rebase-from-remote
		else
			do-local-rebase
		fi
		;;
	"squash")
		do-local-squash
		;;
	esac
}

function strat-local-local() {
	do-diff
	do-local-work
}

function strat-local-remote() {
	(announce-do git fetch "$TARGET_REMOTE" --prune) || announce "Could not fetch, continuing anyway..."
	do-diff

	PUSH_OPTIONS=""
	[[ $CURRENT_BRANCH != "$SOURCE" ]] && announce-do git checkout "$SOURCE"
	if git rev-list --count "$TARGET_DISPLAY".."$SOURCE" -geq 1; then
		announce-menu --title "$SOURCE is ahead $TARGET_DISPLAY, you cannot push." \
			"force:Force-push and overwrite the remote branch (unsafe!)" \
			"give up:Do not do anything."
		announce-menu --chosen "give up" && exit 0
		PUSH_OPTIONS+=" --force"
	fi
	announce-do git push "$PUSH_OPTIONS" "$TARGET_REMOTE" "$TARGET"
	[[ $CURRENT_BRANCH != "$SOURCE" ]] && announce-do git checkout "$CURRENT_BRANCH"
}

function strat-remote-local() {
	announce-do git fetch "$SOURCE_REMOTE" --prune || announce "Could not fetch, continuing anyway..."
	do-diff
	do-local-work --from-remote
}

# ***************************** Execution **************************************

echo
select-branch "Which branch do you want to take commits from?" "$CURRENT_BRANCH"
SOURCE_REMOTE=$CHOICE_REMOTE
SOURCE=$CHOICE
SOURCE_DISPLAY=$CHOICE_DISPLAY

DEFAULT="master"
[[ $TRACKED_BRANCH != "" ]] && DEFAULT=$TRACKED_BRANCH
[[ $SOURCE_REMOTE != "" ]] && DEFAULT=$CURRENT_BRANCH
echo
select-branch "In which branch do you want to put those commits?" "$DEFAULT"
TARGET_REMOTE=$CHOICE_REMOTE
TARGET=$CHOICE
TARGET_DISPLAY=$CHOICE_DISPLAY

echo
announce "Okay, I will take commits from '$SOURCE_DISPLAY' and put them in '$TARGET_DISPLAY'"
if [[ $SOURCE_REMOTE == "" && $TARGET_REMOTE == "" ]]; then
	strat-local-local
elif [[ $SOURCE_REMOTE == "" && ! $TARGET_REMOTE == "" ]]; then
	strat-local-remote
elif [[ $TARGET_REMOTE == "" ]]; then
	strat-remote-local
else
	announce "Sorry, I can't handle two remote branches at the moment."
	echo "One way to do it would be to call this script twice, from $SOURCE_DISPLAY to a local branch, and then from that local branch to $TARGET_DISPLAY."
fi
