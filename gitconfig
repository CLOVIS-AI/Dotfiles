[gpg]
	program = /usr/bin/gpg
[core]
	autocrlf = input
	excludesfile = ~/config/gitignore
	editor = emacs -nw
[credential]
	helper = cache --timeout 1200
[rerere]
	enabled = true
[pull]
	rebase = true
[fetch]
	recurseSubmodules = on-demand
	parallel = 0
	prune = true
[push]
	recurseSubmodules = check
[diff]
	algorithm = histogram
[rebase]
	autoStash = true
	missingCommitsCheck = error
[alias]
	aliases = config --get-regexp ^alias\\.
	p = pull --ff-only --no-rebase
	pl = pull
	pr = pull --rebase=interactive
	pm = pull --no-rebase
	ps = push
	psf = push -f
	pst = push --tags
	psu = push --set-upstream
	psr = "!b=$(git branch | grep \\* | cut -d \" \" -f2); for r in $(git remote); do announce \"Pushing $b to $r\"; git ps $r $b; done"
	unpushed = !git changelog "$(git data --tracked).."
	unpulled = !git changelog "..$(git data --tracked)"
	st = status -sb
	stu = status -sb --untracked=all
	sta = status
	co = checkout
	c = commit
	cm = commit -m
	ca = commit --amend
	a = add
	ap = add -p
	add-new-files = add --intent-to-add
	anf = add --intent-to-add
	f = fetch
	fr = fetch --all
	b = branch
	ba = checkout -b
	bu = branch -u
	bl = branch -vv
	bd = branch -d
	bdr = push -d
	bdrr = "!f() { b=$1; for r in $(git remote); do announce \"Deleting $b on $r\"; git bdr $r $b; done }; f"
	bdrra = "!f() { b=$1; announce \"Deleting local branch $1\"; git bd $1; git bdrr $1; }; f"
	bla = branch -vva
	d = diff --submodule=diff
	dc = diff --cached --submodule=diff
	s = show --show-signature
	authors = shortlog -sn --no-merges
	committers = shortlog -esnc --no-merges
	tags = tag --list --sort=-committerdate -n1
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = ls-files -v | grep ^h | cut -c 3-
	cp = cherry-pick
	rebase-me = !git rebase -i `git merge-base HEAD master`
	sub = submodule
	subi = submodule update --init --recursive
	r = remote
	rr = remote rename
	ra = rebase --abort
	rc = rebase --continue
	rs = rebase --skip
	why-ignore = check-ignore -v --no-index
	policy-merge = "!git config branch.$(git data --current).rebase false"
	policy-rebase = "!git config branch.$(git data --current).rebase true"
